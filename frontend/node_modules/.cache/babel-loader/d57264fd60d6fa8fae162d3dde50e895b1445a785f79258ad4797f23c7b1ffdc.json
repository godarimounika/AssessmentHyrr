{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mouni\\\\OneDrive\\\\Desktop\\\\hyrrassessment\\\\frontend\\\\src\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"./PostList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // You can add an authentication header if needed\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n      setPosts(prevPosts => [...prevPosts, ...data.posts]);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n    }\n  };\n  useEffect(() => {\n    // Fetch posts when the component mounts\n    fetchPosts();\n  }, [page]); // Fetch posts whenever the page changes\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h1>Posts List</h1>\n    //   <ul>\n    //     {posts.map((post) => (\n    //       <li key={post._id}>\n    //         <h2>{post.title}</h2>\n    //         <p>{post.body}</p>\n    //       </li>\n    //     ))}\n    //   </ul>\n    //   <button onClick={() => setPage((prevPage) => prevPage + 1)}>Load More</button>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"container mx-auto p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-semibold mb-4\",\n        children: \"Posts List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-4 p-4 bg-gray-100 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-2\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700\",\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this)]\n        }, post._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(prevPage => prevPage + 1),\n        className: \"bg-blue-500 text-white px-4 py-2 mt-4 rounded hover:bg-blue-600 focus:outline-none focus:shadow-outline\",\n        children: \"Load More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(PostList, \"S+lycjOwIZhAbG4fwTPtDkTcJ2Q=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","page","setPage","fetchPosts","response","fetch","method","headers","ok","Error","data","json","prevPosts","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","body","_id","onClick","prevPage","_c","$RefreshReg$"],"sources":["C:/Users/mouni/OneDrive/Desktop/hyrrassessment/frontend/src/PostList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./PostList.css\"\r\nfunction PostList() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // You can add an authentication header if needed\r\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch posts when the component mounts\r\n    fetchPosts();\r\n  }, [page]); // Fetch posts whenever the page changes\r\n\r\n  return (\r\n    // <div>\r\n    //   <h1>Posts List</h1>\r\n    //   <ul>\r\n    //     {posts.map((post) => (\r\n    //       <li key={post._id}>\r\n    //         <h2>{post.title}</h2>\r\n    //         <p>{post.body}</p>\r\n    //       </li>\r\n    //     ))}\r\n    //   </ul>\r\n    //   <button onClick={() => setPage((prevPage) => prevPage + 1)}>Load More</button>\r\n    // </div>\r\n\r\n\r\n    <div className=\"container mx-auto p-8\">\r\n    <h1 className=\"text-3xl font-semibold mb-4\">Posts List</h1>\r\n    <ul>\r\n      {posts.map((post) => (\r\n        <li key={post._id} className=\"mb-4 p-4 bg-gray-100 rounded-md\">\r\n          <h2 className=\"text-xl font-semibold mb-2\">{post.title}</h2>\r\n          <p className=\"text-gray-700\">{post.body}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    <button\r\n      onClick={() => setPage((prevPage) => prevPage + 1)}\r\n      className=\"bg-blue-500 text-white px-4 py-2 mt-4 rounded hover:bg-blue-600 focus:outline-none focus:shadow-outline\"\r\n    >\r\n      Load More\r\n    </button>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACvB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wCAAuCJ,IAAK,EAAC,EAAE;QAC3EK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;UAChB;UACA;QACF;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCX,QAAQ,CAAEY,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGF,IAAI,CAACX,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACvD;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd;IACAS,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGAL,OAAA;MAAKoB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACtCrB,OAAA;QAAIoB,SAAS,EAAC,6BAA6B;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3DzB,OAAA;QAAAqB,QAAA,EACGlB,KAAK,CAACuB,GAAG,CAAEC,IAAI,iBACd3B,OAAA;UAAmBoB,SAAS,EAAC,iCAAiC;UAAAC,QAAA,gBAC5DrB,OAAA;YAAIoB,SAAS,EAAC,4BAA4B;YAAAC,QAAA,EAAEM,IAAI,CAACC;UAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5DzB,OAAA;YAAGoB,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAEM,IAAI,CAACE;UAAI;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAFrCE,IAAI,CAACG,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLzB,OAAA;QACE+B,OAAO,EAAEA,CAAA,KAAMzB,OAAO,CAAE0B,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAE;QACnDZ,SAAS,EAAC,yGAAyG;QAAAC,QAAA,EACpH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;AAER;AAACvB,EAAA,CAhEQD,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAkEjB,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}