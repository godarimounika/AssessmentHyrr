{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mouni\\\\OneDrive\\\\Desktop\\\\hyrrassessment\\\\frontend\\\\src\\\\PostList.js\",\n  _s = $RefreshSig$();\n// import React,{ useState, useEffect } from 'react'\n\n// function PostList() {\n\n//   const [posts, setPosts] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n\n//   const fetchPosts = async () => {\n//     // try {\n//     //   const response = await fetch(`/api/posts?page=${page}`, {\n//     //     headers: {\n//     //       Authorization: 'Bearer YOUR_ACCESS_TOKEN', // Include authentication token\n//     //     },\n\n//     try {\n//       const accessToken = localStorage.getItem('accessToken');\n//       const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch posts');\n//       }\n\n//       const data = await response.json();\n//       console.log('Fetched data:', data);\n//       setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n//       setPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching posts:', error.message);\n//     }\n//   };\n\n//   const handleScroll = () => {\n//     if (\n//       window.innerHeight + document.documentElement.scrollTop ===\n//       document.documentElement.offsetHeight\n//     ) {\n//       setLoading(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('scroll', handleScroll);\n//     return () => window.removeEventListener('scroll', handleScroll);\n//   }, []);\n\n//   useEffect(() => {\n//     if (loading) {\n//       fetchPosts();\n//     }\n//   }, [loading]);\n\n//   return (\n//     <div className=\"container mx-auto mt-8\">\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\n//         {posts.map((post) => (\n//           <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\n//             {/* Display your post content here */}\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\n//             <p className=\"text-gray-600\">{post.body}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default PostList\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import \"./PostList.css\"\n\n// function PostList() {\n//   const [posts, setPosts] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n\n//   //   try {\n//   //     const accessToken = localStorage.getItem('accessToken');\n//   //     const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n//   //       headers: {\n//   //         Authorization: `Bearer ${accessToken}`,\n//   //       },\n//   //     });\n\n//   //     if (!response.data) {\n//   //       throw new Error('Failed to fetch posts');\n//   //     }\n\n//   //     const data = response.data;\n//   //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n//   //     setPage((prevPage) => prevPage + 1);\n//   //   } catch (error) {\n//   //     console.error('Error fetching posts:', error.message);\n//   //   } finally {\n//   //     setLoading(false);\n//   //   }\n//   // };\n\n//   // const fetchPosts = async () => {\n//   //   try {\n//   //     const accessToken = localStorage.getItem('accessToken');\n//   //     // console.log(\"token:\",accessToken)\n//   //     console.log(accessToken); \n//   //     const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\n\n//   //       headers: {\n//   //         Authorization: `Bearer ${accessToken}`,\n//   //       },\n\n//   //     });\n//   //     console.log('API Response:', response.data); \n\n//   //     if (!response.data) {\n//   //       throw new Error('Failed to fetch posts');\n//   //     }\n\n//   //     if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\n//   //       throw new Error('Failed to fetch posts or invalid response structure');\n//   //     }\n\n//   //     const data = response.data;\n//   //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n//   //     setPage((prevPage) => prevPage + 1);\n//   //   } catch (error) {\n//   //     console.error('Error fetching posts:', error.message);\n//   //   } finally {\n//   //     setLoading(false);\n//   //   }\n//   // };\n\n//   const fetchPosts = async () => {\n//     try {\n//       console.log('Fetching posts...');\n//       const accessToken = localStorage.getItem('accessToken');\n//       console.log('Access Token:', accessToken);\n\n//       const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       });\n\n//       console.log('API Response:', response.data);\n\n//       if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\n//         throw new Error('Failed to fetch posts or invalid response structure');\n//       }\n\n//       const { posts: newPosts } = response.data;\n\n//       setPosts((prevPosts) => [...prevPosts, ...newPosts]);\n//       setPage((prevPage) => prevPage + 1);\n//     } catch (error) {\n//       console.error('Error fetching posts:', error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleScroll = () => {\n//     const { scrollTop, clientHeight, scrollHeight } = document.documentElement;\n\n//     // Check if the user has scrolled to the bottom of the page\n//     if (scrollTop + clientHeight >= scrollHeight - 100 && !loading) {\n//       setLoading(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('scroll', handleScroll);\n\n//     // Cleanup the event listener when the component unmounts\n//     return () => {\n//       window.removeEventListener('scroll', handleScroll);\n//       // console.log('Updated Posts State:', posts);\n//     };\n//   }, []);\n//   console.log('Rendering PostList. Number of posts:', posts.length);\n\n//   useEffect(() => {\n//     if (loading) {\n//       fetchPosts();\n//     }\n//   }, [loading,page]);\n\n//   return (\n//     <div className=\"container mx-auto mt-8\">\n//     <h1>Posts list</h1>\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\n//         {posts.map((post) => (\n//         <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\n//             {/* Display your post content here */}\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\n//             <p className=\"text-gray-600\">{post.body}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default PostList;\n\n// // src/App.js\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n\n// // function App() {\n// //   const [posts, setPosts] = useState([]);\n\n// //   useEffect(() => {\n// //     // Fetch posts when the component mounts\n// //     axios.get('/api/posts')\n// //       .then(response => setPosts(response.data))\n// //       .catch(error => console.error(error));\n// //   }, []);\n\n// //   return (\n// //     <div className=\"App\">\n// //       <h1>MelodyVerse</h1>\n// //       <div className=\"post-list\">\n// //         {posts.map(post => (\n// //           <div key={post._id} className=\"post\">\n// //             <h2>{post.title}</h2>\n// //             <p>{post.content}</p>\n// //           </div>\n// //         ))}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./PostList.css\"\n// function PostList() {\n//   const [posts, setPosts] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch posts when the component mounts\n//     fetch('http://localhost:3001/api/posts')\n//       .then(response => response.json())\n//       // .then(data => setPosts(data.posts))\n//       .then(data => setPosts(data.posts || []))\n//       .catch(error => console.error('Error fetching posts:', error));\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Posts List</h1>\n//       <ul>\n//         {posts.map(post => (\n//           <li key={post._id}>\n//             <h2>{post.title}</h2>\n//             <p>{post.body}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default PostList;\nimport React, { useState, useEffect } from 'react';\nimport \"./PostList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // You can add an authentication header if needed\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n      setPosts(prevPosts => [...prevPosts, ...data.posts]);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n    }\n  };\n  useEffect(() => {\n    // Fetch posts when the component mounts\n    fetchPosts();\n  }, [page]); // Fetch posts whenever the page changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this)]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPage(prevPage => prevPage + 1),\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"S+lycjOwIZhAbG4fwTPtDkTcJ2Q=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","page","setPage","fetchPosts","response","fetch","method","headers","ok","Error","data","json","prevPosts","error","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","body","_id","onClick","prevPage","_c","$RefreshReg$"],"sources":["C:/Users/mouni/OneDrive/Desktop/hyrrassessment/frontend/src/PostList.js"],"sourcesContent":["// import React,{ useState, useEffect } from 'react'\r\n\r\n// function PostList() {\r\n\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [page, setPage] = useState(1);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const fetchPosts = async () => {\r\n//     // try {\r\n//     //   const response = await fetch(`/api/posts?page=${page}`, {\r\n//     //     headers: {\r\n//     //       Authorization: 'Bearer YOUR_ACCESS_TOKEN', // Include authentication token\r\n//     //     },\r\n\r\n//     try {\r\n//       const accessToken = localStorage.getItem('accessToken');\r\n//       const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch posts');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       console.log('Fetched data:', data);\r\n//       setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n//       setPage((prevPage) => prevPage + 1);\r\n//       setLoading(false);\r\n//     } catch (error) {\r\n//       console.error('Error fetching posts:', error.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleScroll = () => {\r\n//     if (\r\n//       window.innerHeight + document.documentElement.scrollTop ===\r\n//       document.documentElement.offsetHeight\r\n//     ) {\r\n//       setLoading(true);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     window.addEventListener('scroll', handleScroll);\r\n//     return () => window.removeEventListener('scroll', handleScroll);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (loading) {\r\n//       fetchPosts();\r\n//     }\r\n//   }, [loading]);\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto mt-8\">\r\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n//         {posts.map((post) => (\r\n//           <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\r\n//             {/* Display your post content here */}\r\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\r\n//             <p className=\"text-gray-600\">{post.body}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default PostList\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import \"./PostList.css\"\r\n\r\n// function PostList() {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [page, setPage] = useState(1);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n\r\n//   //   try {\r\n//   //     const accessToken = localStorage.getItem('accessToken');\r\n//   //     const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n//   //       headers: {\r\n//   //         Authorization: `Bearer ${accessToken}`,\r\n//   //       },\r\n//   //     });\r\n\r\n//   //     if (!response.data) {\r\n//   //       throw new Error('Failed to fetch posts');\r\n//   //     }\r\n\r\n//   //     const data = response.data;\r\n//   //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n//   //     setPage((prevPage) => prevPage + 1);\r\n//   //   } catch (error) {\r\n//   //     console.error('Error fetching posts:', error.message);\r\n//   //   } finally {\r\n//   //     setLoading(false);\r\n//   //   }\r\n//   // };\r\n\r\n\r\n//   // const fetchPosts = async () => {\r\n//   //   try {\r\n//   //     const accessToken = localStorage.getItem('accessToken');\r\n//   //     // console.log(\"token:\",accessToken)\r\n//   //     console.log(accessToken); \r\n//   //     const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\r\n        \r\n//   //       headers: {\r\n//   //         Authorization: `Bearer ${accessToken}`,\r\n//   //       },\r\n        \r\n//   //     });\r\n//   //     console.log('API Response:', response.data); \r\n      \r\n//   //     if (!response.data) {\r\n//   //       throw new Error('Failed to fetch posts');\r\n//   //     }\r\n\r\n\r\n\r\n//   //     if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\r\n//   //       throw new Error('Failed to fetch posts or invalid response structure');\r\n//   //     }\r\n\r\n  \r\n//   //     const data = response.data;\r\n//   //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n//   //     setPage((prevPage) => prevPage + 1);\r\n//   //   } catch (error) {\r\n//   //     console.error('Error fetching posts:', error.message);\r\n//   //   } finally {\r\n//   //     setLoading(false);\r\n//   //   }\r\n//   // };\r\n  \r\n\r\n//   const fetchPosts = async () => {\r\n//     try {\r\n//       console.log('Fetching posts...');\r\n//       const accessToken = localStorage.getItem('accessToken');\r\n//       console.log('Access Token:', accessToken);\r\n  \r\n//       const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//       });\r\n  \r\n//       console.log('API Response:', response.data);\r\n  \r\n//       if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\r\n//         throw new Error('Failed to fetch posts or invalid response structure');\r\n//       }\r\n  \r\n//       const { posts: newPosts } = response.data;\r\n  \r\n//       setPosts((prevPosts) => [...prevPosts, ...newPosts]);\r\n//       setPage((prevPage) => prevPage + 1);\r\n//     } catch (error) {\r\n//       console.error('Error fetching posts:', error.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleScroll = () => {\r\n//     const { scrollTop, clientHeight, scrollHeight } = document.documentElement;\r\n\r\n//     // Check if the user has scrolled to the bottom of the page\r\n//     if (scrollTop + clientHeight >= scrollHeight - 100 && !loading) {\r\n//       setLoading(true);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     window.addEventListener('scroll', handleScroll);\r\n\r\n//     // Cleanup the event listener when the component unmounts\r\n//     return () => {\r\n//       window.removeEventListener('scroll', handleScroll);\r\n//       // console.log('Updated Posts State:', posts);\r\n//     };\r\n//   }, []);\r\n//   console.log('Rendering PostList. Number of posts:', posts.length);\r\n\r\n//   useEffect(() => {\r\n//     if (loading) {\r\n//       fetchPosts();\r\n//     }\r\n//   }, [loading,page]);\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto mt-8\">\r\n//     <h1>Posts list</h1>\r\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n//         {posts.map((post) => (\r\n//         <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\r\n//             {/* Display your post content here */}\r\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\r\n//             <p className=\"text-gray-600\">{post.body}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default PostList;\r\n\r\n// // src/App.js\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n\r\n// // function App() {\r\n// //   const [posts, setPosts] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     // Fetch posts when the component mounts\r\n// //     axios.get('/api/posts')\r\n// //       .then(response => setPosts(response.data))\r\n// //       .catch(error => console.error(error));\r\n// //   }, []);\r\n\r\n// //   return (\r\n// //     <div className=\"App\">\r\n// //       <h1>MelodyVerse</h1>\r\n// //       <div className=\"post-list\">\r\n// //         {posts.map(post => (\r\n// //           <div key={post._id} className=\"post\">\r\n// //             <h2>{post.title}</h2>\r\n// //             <p>{post.content}</p>\r\n// //           </div>\r\n// //         ))}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default App;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./PostList.css\"\r\n// function PostList() {\r\n//   const [posts, setPosts] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch posts when the component mounts\r\n//     fetch('http://localhost:3001/api/posts')\r\n//       .then(response => response.json())\r\n//       // .then(data => setPosts(data.posts))\r\n//       .then(data => setPosts(data.posts || []))\r\n//       .catch(error => console.error('Error fetching posts:', error));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Posts List</h1>\r\n//       <ul>\r\n//         {posts.map(post => (\r\n//           <li key={post._id}>\r\n//             <h2>{post.title}</h2>\r\n//             <p>{post.body}</p>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default PostList;\r\nimport React, { useState, useEffect } from 'react';\r\nimport \"./PostList.css\"\r\nfunction PostList() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // You can add an authentication header if needed\r\n          // 'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch posts when the component mounts\r\n    fetchPosts();\r\n  }, [page]); // Fetch posts whenever the page changes\r\n\r\n  return (\r\n    <div>\r\n      <h1>Posts List</h1>\r\n      <ul>\r\n        {posts.map((post) => (\r\n          <li key={post._id}>\r\n            <h2>{post.title}</h2>\r\n            <p>{post.body}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={() => setPage((prevPage) => prevPage + 1)}>Load More</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACvB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wCAAuCJ,IAAK,EAAC,EAAE;QAC3EK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;UAChB;UACA;QACF;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCX,QAAQ,CAAEY,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGF,IAAI,CAACX,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACvD;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd;IACAS,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEL,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBxB,OAAA;MAAAoB,QAAA,EACGjB,KAAK,CAACsB,GAAG,CAAEC,IAAI,iBACd1B,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UAAAoB,QAAA,EAAKM,IAAI,CAACC;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACrBxB,OAAA;UAAAoB,QAAA,EAAIM,IAAI,CAACE;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFXE,IAAI,CAACG,GAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLxB,OAAA;MAAQ8B,OAAO,EAAEA,CAAA,KAAMxB,OAAO,CAAEyB,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAE;MAAAX,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV;AAACtB,EAAA,CA7CQD,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA+CjB,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}