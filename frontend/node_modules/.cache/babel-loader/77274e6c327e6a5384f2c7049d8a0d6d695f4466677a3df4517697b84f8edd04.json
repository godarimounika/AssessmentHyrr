{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mouni\\\\OneDrive\\\\Desktop\\\\hyrrassessment\\\\frontend\\\\src\\\\PostList.js\",\n  _s = $RefreshSig$();\n// import React,{ useState, useEffect } from 'react'\n\n// function PostList() {\n\n//   const [posts, setPosts] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n\n//   const fetchPosts = async () => {\n//     // try {\n//     //   const response = await fetch(`/api/posts?page=${page}`, {\n//     //     headers: {\n//     //       Authorization: 'Bearer YOUR_ACCESS_TOKEN', // Include authentication token\n//     //     },\n\n//     try {\n//       const accessToken = localStorage.getItem('accessToken');\n//       const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch posts');\n//       }\n\n//       const data = await response.json();\n//       console.log('Fetched data:', data);\n//       setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n//       setPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching posts:', error.message);\n//     }\n//   };\n\n//   const handleScroll = () => {\n//     if (\n//       window.innerHeight + document.documentElement.scrollTop ===\n//       document.documentElement.offsetHeight\n//     ) {\n//       setLoading(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('scroll', handleScroll);\n//     return () => window.removeEventListener('scroll', handleScroll);\n//   }, []);\n\n//   useEffect(() => {\n//     if (loading) {\n//       fetchPosts();\n//     }\n//   }, [loading]);\n\n//   return (\n//     <div className=\"container mx-auto mt-8\">\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\n//         {posts.map((post) => (\n//           <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\n//             {/* Display your post content here */}\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\n//             <p className=\"text-gray-600\">{post.body}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default PostList\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport \"./PostList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  // const fetchPosts = async () => {\n  //   try {\n  //     const accessToken = localStorage.getItem('accessToken');\n  //     const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\n  //       headers: {\n  //         Authorization: `Bearer ${accessToken}`,\n  //       },\n  //     });\n\n  //     if (!response.data) {\n  //       throw new Error('Failed to fetch posts');\n  //     }\n\n  //     const data = response.data;\n  //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n  //     setPage((prevPage) => prevPage + 1);\n  //   } catch (error) {\n  //     console.error('Error fetching posts:', error.message);\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  // const fetchPosts = async () => {\n  //   try {\n  //     const accessToken = localStorage.getItem('accessToken');\n  //     // console.log(\"token:\",accessToken)\n  //     console.log(accessToken); \n  //     const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\n\n  //       headers: {\n  //         Authorization: `Bearer ${accessToken}`,\n  //       },\n\n  //     });\n  //     console.log('API Response:', response.data); \n\n  //     if (!response.data) {\n  //       throw new Error('Failed to fetch posts');\n  //     }\n\n  //     if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\n  //       throw new Error('Failed to fetch posts or invalid response structure');\n  //     }\n\n  //     const data = response.data;\n  //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\n  //     setPage((prevPage) => prevPage + 1);\n  //   } catch (error) {\n  //     console.error('Error fetching posts:', error.message);\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  const fetchPosts = async () => {\n    try {\n      console.log('Fetching posts...');\n      const accessToken = localStorage.getItem('accessToken');\n      console.log('Access Token:', accessToken);\n      const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      console.log('API Response:', response.data);\n      if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\n        throw new Error('Failed to fetch posts or invalid response structure');\n      }\n      const {\n        posts: newPosts\n      } = response.data;\n      setPosts(prevPosts => [...prevPosts, ...newPosts]);\n      setPage(prevPage => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleScroll = () => {\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight\n    } = document.documentElement;\n\n    // Check if the user has scrolled to the bottom of the page\n    if (scrollTop + clientHeight >= scrollHeight - 100 && !loading) {\n      setLoading(true);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    // Cleanup the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      // console.log('Updated Posts State:', posts);\n    };\n  }, []);\n  console.log('Rendering PostList. Number of posts:', posts.length);\n  useEffect(() => {\n    if (loading) {\n      fetchPosts();\n    }\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 shadow-md rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-2\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"vnY1t2sVX/Py6fY5gLvJOU1H/nw=\");\n_c = PostList;\nexport default PostList;\n\n// src/App.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [posts, setPosts] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch posts when the component mounts\n//     axios.get('/api/posts')\n//       .then(response => setPosts(response.data))\n//       .catch(error => console.error(error));\n//   }, []);\n\n//   return (\n//     <div className=\"App\">\n//       <h1>MelodyVerse</h1>\n//       <div className=\"post-list\">\n//         {posts.map(post => (\n//           <div key={post._id} className=\"post\">\n//             <h2>{post.title}</h2>\n//             <p>{post.content}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","page","setPage","loading","setLoading","fetchPosts","console","log","accessToken","localStorage","getItem","response","get","headers","Authorization","data","Array","isArray","Error","newPosts","prevPosts","prevPage","error","message","handleScroll","scrollTop","clientHeight","scrollHeight","document","documentElement","window","addEventListener","removeEventListener","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","body","id","_c","$RefreshReg$"],"sources":["C:/Users/mouni/OneDrive/Desktop/hyrrassessment/frontend/src/PostList.js"],"sourcesContent":["// import React,{ useState, useEffect } from 'react'\r\n\r\n// function PostList() {\r\n\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [page, setPage] = useState(1);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const fetchPosts = async () => {\r\n//     // try {\r\n//     //   const response = await fetch(`/api/posts?page=${page}`, {\r\n//     //     headers: {\r\n//     //       Authorization: 'Bearer YOUR_ACCESS_TOKEN', // Include authentication token\r\n//     //     },\r\n\r\n//     try {\r\n//       const accessToken = localStorage.getItem('accessToken');\r\n//       const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch posts');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       console.log('Fetched data:', data);\r\n//       setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n//       setPage((prevPage) => prevPage + 1);\r\n//       setLoading(false);\r\n//     } catch (error) {\r\n//       console.error('Error fetching posts:', error.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleScroll = () => {\r\n//     if (\r\n//       window.innerHeight + document.documentElement.scrollTop ===\r\n//       document.documentElement.offsetHeight\r\n//     ) {\r\n//       setLoading(true);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     window.addEventListener('scroll', handleScroll);\r\n//     return () => window.removeEventListener('scroll', handleScroll);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (loading) {\r\n//       fetchPosts();\r\n//     }\r\n//   }, [loading]);\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto mt-8\">\r\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n//         {posts.map((post) => (\r\n//           <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\r\n//             {/* Display your post content here */}\r\n//             <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\r\n//             <p className=\"text-gray-600\">{post.body}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default PostList\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport \"./PostList.css\"\r\n\r\nfunction PostList() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // const fetchPosts = async () => {\r\n  //   try {\r\n  //     const accessToken = localStorage.getItem('accessToken');\r\n  //     const response = await fetch(`http://localhost:3001/api/posts?page=${page}`, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${accessToken}`,\r\n  //       },\r\n  //     });\r\n\r\n  //     if (!response.data) {\r\n  //       throw new Error('Failed to fetch posts');\r\n  //     }\r\n\r\n  //     const data = response.data;\r\n  //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n  //     setPage((prevPage) => prevPage + 1);\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching posts:', error.message);\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n\r\n  // const fetchPosts = async () => {\r\n  //   try {\r\n  //     const accessToken = localStorage.getItem('accessToken');\r\n  //     // console.log(\"token:\",accessToken)\r\n  //     console.log(accessToken); \r\n  //     const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\r\n        \r\n  //       headers: {\r\n  //         Authorization: `Bearer ${accessToken}`,\r\n  //       },\r\n        \r\n  //     });\r\n  //     console.log('API Response:', response.data); \r\n      \r\n  //     if (!response.data) {\r\n  //       throw new Error('Failed to fetch posts');\r\n  //     }\r\n\r\n\r\n\r\n  //     if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\r\n  //       throw new Error('Failed to fetch posts or invalid response structure');\r\n  //     }\r\n\r\n  \r\n  //     const data = response.data;\r\n  //     setPosts((prevPosts) => [...prevPosts, ...data.posts]);\r\n  //     setPage((prevPage) => prevPage + 1);\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching posts:', error.message);\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n  \r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      console.log('Fetching posts...');\r\n      const accessToken = localStorage.getItem('accessToken');\r\n      console.log('Access Token:', accessToken);\r\n  \r\n      const response = await axios.get(`http://localhost:3001/api/posts?page=${page}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n  \r\n      console.log('API Response:', response.data);\r\n  \r\n      if (!response.data || !response.data.posts || !Array.isArray(response.data.posts)) {\r\n        throw new Error('Failed to fetch posts or invalid response structure');\r\n      }\r\n  \r\n      const { posts: newPosts } = response.data;\r\n  \r\n      setPosts((prevPosts) => [...prevPosts, ...newPosts]);\r\n      setPage((prevPage) => prevPage + 1);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleScroll = () => {\r\n    const { scrollTop, clientHeight, scrollHeight } = document.documentElement;\r\n\r\n    // Check if the user has scrolled to the bottom of the page\r\n    if (scrollTop + clientHeight >= scrollHeight - 100 && !loading) {\r\n      setLoading(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    // Cleanup the event listener when the component unmounts\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n      // console.log('Updated Posts State:', posts);\r\n    };\r\n  }, []);\r\n  console.log('Rendering PostList. Number of posts:', posts.length);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      fetchPosts();\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8\">\r\n    <h1>Posts list</h1>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n        {posts.map((post) => (\r\n        <div key={post.id} className=\"bg-white p-4 shadow-md rounded-md\">\r\n            {/* Display your post content here */}\r\n            <h2 className=\"text-xl font-bold mb-2\">{post.title}</h2>\r\n            <p className=\"text-gray-600\">{post.body}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n\r\n// src/App.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function App() {\r\n//   const [posts, setPosts] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch posts when the component mounts\r\n//     axios.get('/api/posts')\r\n//       .then(response => setPosts(response.data))\r\n//       .catch(error => console.error(error));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>MelodyVerse</h1>\r\n//       <div className=\"post-list\">\r\n//         {posts.map(post => (\r\n//           <div key={post._id} className=\"post\">\r\n//             <h2>{post.title}</h2>\r\n//             <p>{post.content}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}